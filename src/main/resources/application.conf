general {
  dataDir = /Users/mark.wolters/Dev/repos/tmobile/T-Mobile-Gatling-DSE-Code
} # end general settings

cassandra {

#  hosts = ["10.0.0.160"]
#  dcName = SuperPNW
#  clusterName = Super_dse67
#  defaultKeyspace = payments_tst
  hosts = ["127.0.0.1"]
  dcName = dc1
  clusterName = 'Test Cluster'
  defaultConsistency = LOCAL_QUORUM

#  auth = {
#    username = cassandra
#    password = "cassandra"
#  }
}  # end cassandra settings

simulations {

  // 1 Acquirer_Transactions_Detail_Simulation
  acquirer_transaction_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 1
    }

    defaults {
      keyspace = payments_tst
      table = acquirer_transactions_detail
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [dps_payment_id]
      columnsToFetch = [dps_payment_id, process_id, acquirer_api, acquirer_name, acquirer_parent_payment_id, acquirer_paymentid, acquirer_response_code]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 1000
    }

    acq_Trans_Payment_Write {
      usersConstantCnt = 3000
    }
    acq_Trans_Payment_Read {
      dataFile = Acquirer_Transactions_Detail_Load20.csv
      usersConstantCnt = 2500
    }
  }

  // 2 Batch_payment_transaction_details_Simulation
  batch_payment_transaction_details_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 1
      enabled=false
    }

    defaults {
      keyspace = payments
      table = batch_payment_transaction_details
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [dps_payment_id]
      columnsToFetch = [dps_payment_id, tmotoken, account_number, batch_id, account_name, acquirer_response_code]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 10
    }

    btch_Trans_Details_Payment_Write {
      usersConstantCnt = 10
    }

    btch_Trans_Details_Payment_Read {
      dataFile = btch_Trans_Details_Load20.csv
      usersConstantCnt = 25
    }
  }

  // 3 Batch_pymt_txn_dtls_by_batchid_Simulation
  Batch_pymt_txn_dtls_by_batchid_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 1
    }

    defaults {
      keyspace = payments_tst
      table = batch_pymt_txn_dtls_by_batchid
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [batch_id]
      columnsToFetch = [batch_id, tmotoken, account_number, dps_payment_id, account_name, acquirer_message, acquirer_name]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 10
    }

    btch_Trans_Details_Btchid_Payment_Write {
      usersConstantCnt = 10
    }


    btch_Trans_Details_Btchid_Payment_Read {
      dataFile = btch_Trans_Details_Batchid_Load20.csv
      usersConstantCnt = 25
    }
  }
  // 4 Wallet_Simulation
  Wallet_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = wallet
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [billing_account_number, common_customer_id]
      columnsToFetch = [billing_account_number, common_customer_id, wallet_id, created_by, created_by, created_date, modified_by, modified_date]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 25
    }

    Wallet_Simulation_Payment_Write {
      usersConstantCnt = 220
    }


    Wallet_Simulation_Payment_Read {
      dataFile = Wallet_Simulation_Load20.csv
      usersConstantCnt = 250
    }
  }
  // 5 Payment_duplicate_check_Simulation
  Payment_duplicate_check_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = payment_duplicate_check
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [transaction_type, application_id]
      columnsToFetch = [transaction_type, application_id, amount, billing_account_number, common_customer_id, transaction_date]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 10000
    }

    Payment_duplicate_check_PaymentWrite {
      usersConstantCnt = 10
    }


    Payment_duplicate_check_PaymentRead {
      dataFile = Payment_duplicate_check_Load20.csv
      usersConstantCnt = 25
    }
  }

  // 6 Payment_Lifecycle_Simulation
  Payment_Lifecycle_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = payment_lifecycle
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [parent_payment_id]
      columnsToFetch = [parent_payment_id, transaction_type,dps_payment_id,reversal_retry_count,status]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 100
    }

    Payment_Lifecycle_Simulation_Payment_Write {
      usersConstantCnt = 100
    }

    Payment_Lifecycle_Simulation_Payment_Read {
      dataFile = Payment_Lifecycle_Simulation_Load20.csv
      usersConstantCnt = 250
    }
  }

  // 7 Payment_outgoing_feed_Simulation
  Payment_outgoing_feed_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = payment_outgoing_feed
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [batch_id]
      columnsToFetch = [batch_id, activity_id, acquirer_approval_code, acquirer_avs_response_code, acquirer_cvn_response_code, acquirer_cvv_response_code]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 10
    }

    Payment_outgoing_feed_Simulation_Payment_Write {
      usersConstantCnt = 10
    }


    Payment_outgoing_feed_Simulation_Payment_Read {
      dataFile = Payment_outgoing_feed_Simulation_Load20.csv
      usersConstantCnt = 25
    }
  }
  // 8 Payment_Transactions_Detail_Simulation
  Payment_Transactions_Detail_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = payment_transactions_detail
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [dps_payment_id]
      columnsToFetch = [dps_payment_id, process_id, accuity_abarouting_number, acquirer_approval_code, acquirer_avs_responsecode, acquirer_cvv_responsecode]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 100
    }

    Payment_Transactions_Detail_Simulation_Payment_Write {
      usersConstantCnt = 100
    }


    Payment_Transactions_Detail_Simulation_Payment_Read {
      dataFile = Payment_Transactions_Detail_Simulation_Load20.csv
      usersConstantCnt = 250
    }
  }

  //9 Payment_transactions_detail_dpt_Simulation
  Payment_transactions_detail_dpt_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
    }

    defaults {
      keyspace = payments_tst
      table = payment_transactions_detail_dpt
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [dps_payment_id]
      columnsToFetch = [dps_payment_id, card_first_6, card_last_4, process_id, accuity_abarouting_number, acquirer_approval_code]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 100
    }

    Payment_transactions_detail_dpt_Simulation_Payment_Write {
      usersConstantCnt = 100
    }


    Payment_transactions_detail_dpt_Simulation_Payment_Read {
      dataFile = Payment_transactions_detail_dpt_Simulation_Load20.csv
      usersConstantCnt = 250
    }
  }

  // 10 Stored_payment_method_Simulation
  Stored_payment_method_Simulation_configuration {

    createKeyspace {
      topology = SimpleStrategy
      replication = 3
      enabled=false
    }

    defaults {
      keyspace = payments_tst
      table = Stored_payment_method
      perPartitionDisabled = false
      tokenRangesPerHost = 8
      paginationSize = 100
      maxPartitionKeys = 500
      appendToFile = false
      partitionKeyColumns = [wallet_id]
      columnsToFetch = [wallet_id, tmotoken, account_holder_first_name, account_holder_full_name, account_holder_last_name, address_line_1, applicationname]
      usersRampTime = 10s
      usersConstantTime = 50s
      usersConstantCnt = 25
    }

    Stored_payment_method_Simulation_Payment_Write {
      usersConstantCnt = 22
    }


    Stored_payment_method_Simulation_Payment_Read {
      dataFile = Stored_payment_method_Simulation_Load20.csv
      usersConstantCnt = 250
    }
  }

  solrPayments {
      createKeyspace {
        enabled: true
        topology = SimpleStrategy
        replication = 1
      }
      defaults {
        perPartitionDisabled = false
        keyspace = "payments_tst"
        usersRampTime = 10s
        usersConstantTime = 50s
      }

      solr {
        useCql = false # use CQL to create indexes (DSE 5.1 only) defaults to http
        https = false # use HTTPS when using http to create solr schema schema
        httpPort = 8983
        configXml = "/solr/solrConfig.xml"
        schemaXml = "/solr/solrSchema.xml"
      }
      writePayments {
        usersConstantCnt = 10
        table = "payments_search"
      }
      queryPayments {
        usersConstantCnt = 10
        table = "payments_search"
      }
    } # end SolrPayments

    solrPaymentsBatch {
      createKeyspace {
        enabled: true
        topology = SimpleStrategy
        replication = 1
      }
      defaults {
        perPartitionDisabled = false
        keyspace = "payments"
        table = "payment_transactions_detail_dpt"
        usersRampTime = 10s
        usersConstantTime = 50s
      }
      solr {
        useCql = false # use CQL to create indexes (DSE 5.1 only) defaults to http
        https = false # use HTTPS when using http to create solr schema schema
        httpPort = 8983
        configXml = "/solr/solrConfig.xml"
        schemaXml = "/solr/solrSchema.xml"
      }
      writeDpt {
        usersConstantCnt = 10
        table = "payment_transactions_detail_dpt"
      }
      queryPaymentsBatch {
        usersConstantCnt = 10
      }
      readWriteDpt {
        usersConstantCnt = 10
        table = "payment_transactions_detail_dpt"
      }
    }
}
